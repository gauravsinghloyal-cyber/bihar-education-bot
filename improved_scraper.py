import os
import schedule
import time
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

# --- рдЕрдиреНрдп рдлрд╛рдЗрд▓реЛрдВ рд╕реЗ рдХреНрд▓рд╛рд╕ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ ---
# рдпрд╣ рдорд╛рдиреЗрдВ рдХрд┐ рдпреЗ рдлрд╛рдЗрд▓реЗрдВ рдЖрдкрдХреЗ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдореЗрдВ рдореМрдЬреВрдж рд╣реИрдВ
from improved_scraper import BiharEducationScraper
from database import Database

class BiharEducationNotifier:
    def __init__(self):
        # рд╕рдмрд╕реЗ рд╕реБрд░рдХреНрд╖рд┐рдд рддрд░реАрдХрд╛: рдЯреЛрдХрди рдХреЛ .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ рд▓реЛрдб рдХрд░реЗрдВ
        self.TOKEN = os.getenv('TELEGRAM_TOKEN')
        if not self.TOKEN:
            raise ValueError("TELEGRAM_TOKEN рдирд╣реАрдВ рдорд┐рд▓рд╛! рдХреГрдкрдпрд╛ рдЕрдкрдиреА .env рдлрд╝рд╛рдЗрд▓ рдЬрд╛рдВрдЪреЗрдВред")
        
        self.bot = telebot.TeleBot(self.TOKEN, parse_mode='HTML')
        self.scraper = BiharEducationScraper()
        self.db = Database()
        self.setup_handlers()

    # --- рдХреАрдмреЛрд░реНрдб рдмрдирд╛рдиреЗ рд╡рд╛рд▓реЗ рд╣реЗрд▓реНрдкрд░ рдлрдВрдХреНрд╢рдиреНрд╕ (рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ) ---
    def _main_menu_keyboard(self):
        """рдореБрдЦреНрдп рдореЗрдиреВ рдХрд╛ рдХреАрдмреЛрд░реНрдб рдмрдирд╛рддрд╛ рд╣реИред"""
        keyboard = [
            [InlineKeyboardButton("ЁЯУЛ рд╕рд░рдХрд╛рд░реА рдиреМрдХрд░рд┐рдпрд╛рдВ", callback_data='menu_govt_jobs')],
            [InlineKeyboardButton("ЁЯОУ рдпреВрдирд┐рд╡рд░реНрд╕рд┐рдЯреА рдЬрд╛рдирдХрд╛рд░реА", callback_data='menu_university_info')],
            [InlineKeyboardButton("ЁЯУЪ рд╕реНрдЯрдбреА рдордЯреЗрд░рд┐рдпрд▓", callback_data='menu_study_material')],
            [InlineKeyboardButton("тЭУ рдбреЗрд▓реА рдХреНрд╡рд┐рдЬрд╝", callback_data='menu_daily_quiz')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _govt_jobs_keyboard(self):
        """рд╕рд░рдХрд╛рд░реА рдиреМрдХрд░рд┐рдпреЛрдВ рдХреЗ рд╕рдм-рдореЗрдиреВ рдХрд╛ рдХреАрдмреЛрд░реНрдб рдмрдирд╛рддрд╛ рд╣реИред"""
        keyboard = [
            [InlineKeyboardButton("тЬЕ BPSC Jobs", callback_data='fetch_jobs_bpsc')],
            [InlineKeyboardButton("ЁЯСо Bihar Police", callback_data='fetch_jobs_police')],
            [InlineKeyboardButton("ЁЯзСтАНЁЯПл Teaching Jobs", callback_data='fetch_jobs_teaching')],
            [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕ рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░", callback_data='back_to_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _university_info_keyboard(self):
        """рдпреВрдирд┐рд╡рд░реНрд╕рд┐рдЯреА рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд╕рдм-рдореЗрдиреВ рдХрд╛ рдХреАрдмреЛрд░реНрдб рдмрдирд╛рддрд╛ рд╣реИред"""
        keyboard = [
            [InlineKeyboardButton("ЁЯПЫя╕П Patna University", callback_data='fetch_uni_patna')],
            [InlineKeyboardButton("ЁЯЫая╕П IIT Patna", callback_data='fetch_uni_iitp')],
            [InlineKeyboardButton("тЪЩя╕П NIT Patna", callback_data='fetch_uni_nitp')],
            [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕ рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░", callback_data='back_to_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _study_material_keyboard(self):
        """рд╕реНрдЯрдбреА рдордЯреЗрд░рд┐рдпрд▓ рдХреЗ рд╕рдм-рдореЗрдиреВ рдХрд╛ рдХреАрдмреЛрд░реНрдб рдмрдирд╛рддрд╛ рд╣реИред"""
        keyboard = [
            [InlineKeyboardButton("ЁЯУС рд╕рд┐рд▓реЗрдмрд╕", callback_data='fetch_study_syllabus')],
            [InlineKeyboardButton("ЁЯУЭ рдкрд┐рдЫрд▓реЗ рд╡рд░реНрд╖ рдХреЗ рдкреЗрдкрд░", callback_data='fetch_study_papers')],
            [InlineKeyboardButton("ЁЯУХ рдореБрдлреНрдд PDFs", callback_data='fetch_study_pdfs')],
            [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕ рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░", callback_data='back_to_main')]
        ]
        return InlineKeyboardMarkup(keyboard)
        
    # --- **рдирдпрд╛ рдлреАрдЪрд░: рдореИрд╕реЗрдЬ рдлреЙрд░реНрдореЗрдЯрд┐рдВрдЧ** ---
    def _format_updates_message(self, updates, title):
        """рдЕрдкрдбреЗрдЯреНрд╕ рдХреА рд▓рд┐рд╕реНрдЯ рдХреЛ рдПрдХ рд╕реБрдВрджрд░ рдореИрд╕реЗрдЬ рдореЗрдВ рдлреЙрд░реНрдореЗрдЯ рдХрд░рддрд╛ рд╣реИред"""
        if not updates:
            return f"<b>{title}</b>\n\nрдлрд┐рд▓рд╣рд╛рд▓ рдХреЛрдИ рдирдпрд╛ рдЕрдкрдбреЗрдЯ рдирд╣реАрдВ рд╣реИред ЁЯШФ"
        
        message = f"<b>{title}</b>\n\n"
        for update in updates[:5]: # рдХреЗрд╡рд▓ рдЯреЙрдк 5 рдЕрдкрдбреЗрдЯреНрд╕ рджрд┐рдЦрд╛рдПрдВ
            message += f"ЁЯФ╣ <b>{update.get('title', 'N/A')}</b>\n"
            message += f"   <a href='{update.get('link', '#')}'>ЁЯФЧ рдЕрднреА рджреЗрдЦреЗрдВ</a> | ЁЯУЕ {update.get('date', 'N/A')}\n\n"
        
        if len(updates) > 5:
            message += f"<i>...рдФрд░ {len(updates) - 5} рдЕрдиреНрдп рдЕрдкрдбреЗрдЯреНрд╕ред</i>"
            
        return message

    # --- рдмреЙрдЯ рдХреЗ рд╣реИрдВрдбрд▓рд░реНрд╕ ---
    def setup_handlers(self):
        """рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдХрдорд╛рдВрдбреНрд╕ рдФрд░ рдмрдЯрдиреНрд╕ рдХреЗ рд▓рд┐рдП рд╣реИрдВрдбрд▓рд░реНрд╕ рд╕реЗрдЯ рдХрд░рддрд╛ рд╣реИред"""
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message):
            # рдирдП рдпреВрдЬрд░ рдХреЛ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ
            self.db.add_user(message.chat.id)
            welcome_text = "рдирдорд╕реНрддреЗ! ЁЯЩП\nрдмрд┐рд╣рд╛рд░ рдПрдЬреБрдХреЗрд╢рди рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред\n\nрдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╡рд┐рдХрд▓реНрдкреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рдЪреБрдиреЗрдВ:"
            self.bot.send_message(message.chat.id, welcome_text, reply_markup=self._main_menu_keyboard())

        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback_query(call):
            """рд╕рднреА рдмрдЯрди рдХреНрд▓рд┐рдХреНрд╕ рдХреЛ рд╣реИрдВрдбрд▓ рдХрд░рддрд╛ рд╣реИред"""
            self.bot.answer_callback_query(call.id)
            chat_id = call.message.chat.id
            message_id = call.message.message_id
            
            # --- **рдореБрдЦреНрдп рдореЗрдиреВ рд╣реИрдВрдбрд▓рд┐рдВрдЧ (рдЕрдкрдбреЗрдЯреЗрдб)** ---
            if call.data == 'menu_govt_jobs':
                self.bot.edit_message_text("рд╕рд░рдХрд╛рд░реА рдиреМрдХрд░реА рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ:", chat_id, message_id, reply_markup=self._govt_jobs_keyboard())
            
            elif call.data == 'menu_university_info':
                self.bot.edit_message_text("рдпреВрдирд┐рд╡рд░реНрд╕рд┐рдЯреА рдЪреБрдиреЗрдВ:", chat_id, message_id, reply_markup=self._university_info_keyboard())

            elif call.data == 'menu_study_material':
                self.bot.edit_message_text("рд╕реНрдЯрдбреА рдордЯреЗрд░рд┐рдпрд▓ рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ:", chat_id, message_id, reply_markup=self._study_material_keyboard())

            elif call.data == 'menu_daily_quiz':
                self.bot.edit_message_text("рдбреЗрд▓реА рдХреНрд╡рд┐рдЬрд╝ рдХреА рд╕реБрд╡рд┐рдзрд╛ рдЬрд▓реНрдж рд╣реА рд╢реБрд░реВ рд╣реЛрдЧреА!", chat_id, message_id)

            # --- **рдирдпрд╛ рдлреАрдЪрд░: рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛** ---
            elif call.data.startswith('fetch_'):
                self.bot.edit_message_text("тП│ рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ, рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдИ рдЬрд╛ рд░рд╣реА рд╣реИ...", chat_id, message_id)
                
                parts = call.data.split('_')
                category_type = parts[1] # 'jobs', 'uni', 'study'
                category_name = parts[2].upper() # 'BPSC', 'PATNA', 'SYLLABUS'
                
                # рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рдЕрдкрдбреЗрдЯреНрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
                updates = self.db.get_updates_by_category(category_name)
                
                message_title = f"{category_name} рдЕрдкрдбреЗрдЯреНрд╕"
                formatted_message = self._format_updates_message(updates, message_title)
                
                # рд╡рд╛рдкрд╕ рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ рдмрдЯрди рдХреЗ рд╕рд╛рде рдХреАрдмреЛрд░реНрдб рдЪреБрдиреЗрдВ
                back_keyboard = self._main_menu_keyboard() # рдбрд┐рдлрд╝реЙрд▓реНрдЯ
                if category_type == 'jobs':
                    back_keyboard = self._govt_jobs_keyboard()
                elif category_type == 'uni':
                    back_keyboard = self._university_info_keyboard()
                elif category_type == 'study':
                    back_keyboard = self._study_material_keyboard()

                self.bot.edit_message_text(formatted_message, chat_id, message_id, reply_markup=back_keyboard, disable_web_page_preview=True)

            # --- рд╡рд╛рдкрд╕ рдЬрд╛рдиреЗ рдХрд╛ рдмрдЯрди ---
            elif call.data == 'back_to_main':
                welcome_text = "рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░ рд╡рд╛рдкрд╕ рдЖ рдЧрдПред\n\nрдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╡рд┐рдХрд▓реНрдкреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рдЪреБрдиреЗрдВ:"
                self.bot.edit_message_text(welcome_text, chat_id, message_id, reply_markup=self._main_menu_keyboard())

    # --- **рд╢реЗрдбреНрдпреВрд▓рд░ (рдЕрдкрдбреЗрдЯреЗрдб)** ---
    def send_daily_update(self):
        """рдирдИ рдЬрд╛рдирдХрд╛рд░реА рд╕реНрдХреНрд░реИрдк рдХрд░рддрд╛ рд╣реИ, DB рдореЗрдВ рд╕реЗрд╡ рдХрд░рддрд╛ рд╣реИ рдФрд░ рдпреВрдЬрд░реНрд╕ рдХреЛ рднреЗрдЬрддрд╛ рд╣реИред"""
        print("ЁЯУ░ рджреИрдирд┐рдХ рдЕрдкрдбреЗрдЯ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╢реБрд░реВ рд╣реЛ рд░рд╣реА рд╣реИ...")
        try:
            new_updates = self.scraper.check_for_new_updates()
            if new_updates:
                # рдирдП рдЕрдкрдбреЗрдЯреНрд╕ рдХреЛ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рд╕реЗрд╡ рдХрд░реЗрдВ рдФрд░ рдХреЗрд╡рд▓ 'рдирдП' рд╡рд╛рд▓реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
                truly_new_items = self.db.save_updates(new_updates)
                
                if truly_new_items:
                    print(f"тЬЕ {len(truly_new_items)} рдирдП рдЕрдкрдбреЗрдЯреНрд╕ рдорд┐рд▓реЗред рдпреВрдЬрд░реНрд╕ рдХреЛ рд╕реВрдЪрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...")
                    update_message = self._format_updates_message(truly_new_items, "рдЖрдЬ рдХреЗ рдирдП рдЕрдкрдбреЗрдЯреНрд╕ тЬи")
                    
                    # рд╕рднреА рдпреВрдЬрд░реНрд╕ рдХреЛ рдЕрдкрдбреЗрдЯ рднреЗрдЬреЗрдВ
                    all_users = self.db.get_all_user_ids()
                    for user_id in all_users:
                        try:
                            self.bot.send_message(user_id, update_message, disable_web_page_preview=True)
                            time.sleep(0.1) # рд╕реНрдкреИрдорд┐рдВрдЧ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдереЛрдбрд╝рд╛ рд░реБрдХреЗрдВ
                        except Exception as e:
                            print(f"User {user_id} рдХреЛ рдореИрд╕реЗрдЬ рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓: {e}")
                else:
                    print("ЁЯСН рдХреЛрдИ рднреА 'рд╕рдЪрдореБрдЪ рдирдпрд╛' рдЕрдкрдбреЗрдЯ рдирд╣реАрдВ рдорд┐рд▓рд╛ред")
            else:
                print("ЁЯд╖тАНтЩВя╕П рд╕реНрдХреНрд░реИрдкрд░ рдХреЛ рдХреЛрдИ рдЕрдкрдбреЗрдЯ рдирд╣реАрдВ рдорд┐рд▓рд╛ред")
        except Exception as e:
            print(f"тЭМ рджреИрдирд┐рдХ рдЕрдкрдбреЗрдЯ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")

    def run_scheduler(self):
        """рд╢реЗрдбреНрдпреВрд▓рд░ рдХреЛ рдЪрд▓рд╛рддрд╛ рд╣реИред"""
        # рд╣рд░ 30 рдорд┐рдирдЯ рдореЗрдВ рдЕрдкрдбреЗрдЯреНрд╕ рдЪреЗрдХ рдХрд░реЗрдВ
        schedule.every(30).minutes.do(self.send_daily_update)
        while True:
            schedule.run_pending()
            time.sleep(1)

