import os
import schedule
import time
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

class BiharEducationNotifier:
    def __init__(self):
        # рд╕рдмрд╕реЗ рд╕реБрд░рдХреНрд╖рд┐рдд рддрд░реАрдХрд╛: рдЯреЛрдХрди рдХреЛ .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ рд▓реЛрдб рдХрд░реЗрдВ
        self.TOKEN = os.getenv('TELEGRAM_TOKEN')
        if not self.TOKEN:
            raise ValueError("TELEGRAM_TOKEN рдирд╣реАрдВ рдорд┐рд▓рд╛! рдХреГрдкрдпрд╛ рдЕрдкрдиреА .env рдлрд╝рд╛рдЗрд▓ рдЬрд╛рдВрдЪреЗрдВред")
        
        self.bot = telebot.TeleBot(self.TOKEN)
        self.setup_handlers()

    # --- рдХреАрдмреЛрд░реНрдб рдмрдирд╛рдиреЗ рд╡рд╛рд▓реЗ рд╣реЗрд▓реНрдкрд░ рдлрдВрдХреНрд╢рдиреНрд╕ ---
    def _main_menu_keyboard(self):
        """рдореБрдЦреНрдп рдореЗрдиреВ рдХрд╛ рдХреАрдмреЛрд░реНрдб рдмрдирд╛рддрд╛ рд╣реИред"""
        keyboard = [
            [InlineKeyboardButton("ЁЯУЛ рд╕рд░рдХрд╛рд░реА рдиреМрдХрд░рд┐рдпрд╛рдВ", callback_data='menu_govt_jobs')],
            [InlineKeyboardButton("ЁЯОУ рдпреВрдирд┐рд╡рд░реНрд╕рд┐рдЯреА рдЬрд╛рдирдХрд╛рд░реА", callback_data='menu_university_info')],
            [InlineKeyboardButton("ЁЯУЪ рд╕реНрдЯрдбреА рдордЯреЗрд░рд┐рдпрд▓", callback_data='menu_study_material')],
            [InlineKeyboardButton("тЭУ рдбреЗрд▓реА рдХреНрд╡рд┐рдЬрд╝", callback_data='menu_daily_quiz')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _govt_jobs_keyboard(self):
        """рд╕рд░рдХрд╛рд░реА рдиреМрдХрд░рд┐рдпреЛрдВ рдХреЗ рд╕рдм-рдореЗрдиреВ рдХрд╛ рдХреАрдмреЛрд░реНрдб рдмрдирд╛рддрд╛ рд╣реИред"""
        keyboard = [
            [InlineKeyboardButton("тЬЕ BPSC Jobs", callback_data='jobs_bpsc')],
            [InlineKeyboardButton("ЁЯСо Bihar Police", callback_data='jobs_police')],
            [InlineKeyboardButton("ЁЯзСтАНЁЯПл Teaching Jobs", callback_data='jobs_teaching')],
            [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕ рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░", callback_data='back_to_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _university_info_keyboard(self):
        """рдпреВрдирд┐рд╡рд░реНрд╕рд┐рдЯреА рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд╕рдм-рдореЗрдиреВ рдХрд╛ рдХреАрдмреЛрд░реНрдб рдмрдирд╛рддрд╛ рд╣реИред"""
        keyboard = [
            [InlineKeyboardButton("ЁЯПЫя╕П Patna University", callback_data='uni_patna')],
            [InlineKeyboardButton("ЁЯЫая╕П IIT Patna", callback_data='uni_iitp')],
            [InlineKeyboardButton("тЪЩя╕П NIT Patna", callback_data='uni_nitp')],
            [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕ рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░", callback_data='back_to_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _study_material_keyboard(self):
        """рд╕реНрдЯрдбреА рдордЯреЗрд░рд┐рдпрд▓ рдХреЗ рд╕рдм-рдореЗрдиреВ рдХрд╛ рдХреАрдмреЛрд░реНрдб рдмрдирд╛рддрд╛ рд╣реИред"""
        keyboard = [
            [InlineKeyboardButton("ЁЯУС рд╕рд┐рд▓реЗрдмрд╕", callback_data='study_syllabus')],
            [InlineKeyboardButton("ЁЯУЭ рдкрд┐рдЫрд▓реЗ рд╡рд░реНрд╖ рдХреЗ рдкреЗрдкрд░", callback_data='study_papers')],
            [InlineKeyboardButton("ЁЯУХ рдореБрдлреНрдд PDFs", callback_data='study_pdfs')],
            [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕ рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░", callback_data='back_to_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    # --- рдмреЙрдЯ рдХреЗ рд╣реИрдВрдбрд▓рд░реНрд╕ ---
    def setup_handlers(self):
        """рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдХрдорд╛рдВрдбреНрд╕ рдФрд░ рдмрдЯрдиреНрд╕ рдХреЗ рд▓рд┐рдП рд╣реИрдВрдбрд▓рд░реНрд╕ рд╕реЗрдЯ рдХрд░рддрд╛ рд╣реИред"""
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message):
            welcome_text = "рдирдорд╕реНрддреЗ! ЁЯЩП\nрдмрд┐рд╣рд╛рд░ рдПрдЬреБрдХреЗрд╢рди рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред\n\nрдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╡рд┐рдХрд▓реНрдкреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рдЪреБрдиреЗрдВ:"
            self.bot.send_message(message.chat.id, welcome_text, reply_markup=self._main_menu_keyboard())

        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback_query(call):
            """рд╕рднреА рдмрдЯрди рдХреНрд▓рд┐рдХреНрд╕ рдХреЛ рд╣реИрдВрдбрд▓ рдХрд░рддрд╛ рд╣реИред"""
            self.bot.answer_callback_query(call.id) # рдХреНрд▓рд┐рдХ рдХрд╛ рдЬрд╡рд╛рдм рджреЗрдирд╛
            
            # рдореБрдЦреНрдп рдореЗрдиреВ рдХреЗ рд╡рд┐рдХрд▓реНрдк
            if call.data == 'menu_govt_jobs':
                self.bot.edit_message_text("рд╕рд░рдХрд╛рд░реА рдиреМрдХрд░реА рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=self._govt_jobs_keyboard())
            
            elif call.data == 'menu_university_info':
                self.bot.edit_message_text("рдпреВрдирд┐рд╡рд░реНрд╕рд┐рдЯреА рдЪреБрдиреЗрдВ:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=self._university_info_keyboard())

            elif call.data == 'menu_study_material':
                self.bot.edit_message_text("рд╕реНрдЯрдбреА рдордЯреЗрд░рд┐рдпрд▓ рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=self._study_material_keyboard())

            elif call.data == 'menu_daily_quiz':
                self.bot.edit_message_text("рдбреЗрд▓реА рдХреНрд╡рд┐рдЬрд╝ рдХреА рд╕реБрд╡рд┐рдзрд╛ рдЬрд▓реНрдж рд╣реА рд╢реБрд░реВ рд╣реЛрдЧреА!", chat_id=call.message.chat.id, message_id=call.message.message_id)

            # рд╕рдм-рдореЗрдиреВ рдХреЗ рд╡рд┐рдХрд▓реНрдк
            elif call.data.startswith('jobs_'):
                job_type = call.data.split('_')[1].upper()
                self.bot.edit_message_text(f"рдЖрдкрдиреЗ {job_type} рдиреМрдХрд░рд┐рдпрд╛рдВ рдЪреБрдиреА рд╣реИрдВред рдЕрдкрдбреЗрдЯреНрд╕ рдЬрд▓реНрдж рд╣реА рдпрд╣рд╛рдБ рдорд┐рд▓реЗрдВрдЧреЗред", chat_id=call.message.chat.id, message_id=call.message.message_id)

            elif call.data.startswith('uni_'):
                uni_name = call.data.split('_')[1].upper()
                self.bot.edit_message_text(f"{uni_name} рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЬрд▓реНрдж рд╣реА рдпрд╣рд╛рдБ рдЙрдкрд▓рдмреНрдз рд╣реЛрдЧреАред", chat_id=call.message.chat.id, message_id=call.message.message_id)

            elif call.data.startswith('study_'):
                material_type = call.data.split('_')[1].capitalize()
                self.bot.edit_message_text(f"{material_type} рдЬрд▓реНрдж рд╣реА рдпрд╣рд╛рдБ рдЕрдкрд▓реЛрдб рдХрд┐рдП рдЬрд╛рдПрдВрдЧреЗред", chat_id=call.message.chat.id, message_id=call.message.message_id)

            # рд╡рд╛рдкрд╕ рдЬрд╛рдиреЗ рдХрд╛ рдмрдЯрди
            elif call.data == 'back_to_main':
                welcome_text = "рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░ рд╡рд╛рдкрд╕ рдЖ рдЧрдПред\n\nрдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╡рд┐рдХрд▓реНрдкреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рдЪреБрдиреЗрдВ:"
                self.bot.edit_message_text(welcome_text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=self._main_menu_keyboard())

    # --- рд╢реЗрдбреНрдпреВрд▓рд░ рдХреЗ рдлрдВрдХреНрд╢рдиреНрд╕ ---
    def send_daily_update(self):
        """рджреИрдирд┐рдХ рдЕрдкрдбреЗрдЯ рднреЗрдЬрдиреЗ рдХрд╛ рд▓реЙрдЬрд┐рдХ рдпрд╣рд╛рдБ рдЖрдПрдЧрд╛ред"""
        print("ЁЯУ░ рджреИрдирд┐рдХ рдЕрдкрдбреЗрдЯ рднреЗрдЬрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...")

    def run_scheduler(self):
        """рд╢реЗрдбреНрдпреВрд▓рд░ рдХреЛ рдЪрд▓рд╛рддрд╛ рд╣реИред"""
        schedule.every().day.at("08:00").do(self.send_daily_update)
        while True:
            schedule.run_pending()
            time.sleep(1)

